/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.component;

import hr.algebra.LoginForm;
import hr.algebra.UserForm;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreTableModel;
import hr.algebra.utils.MessageUtils;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author User
 */
public class EditGenreForm extends javax.swing.JFrame {

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Repository repository;
    private GenreTableModel genreTableModel;
    private Genre selectedGenre;

    /**
     * Creates new form EditGenreForm
     */
    public EditGenreForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfGenreName = new javax.swing.JTextField();
        btnAddGenre = new javax.swing.JButton();
        btnUpdateGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbGenres = new javax.swing.JTable();
        lblErrorGenreName = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miEditPerson = new javax.swing.JMenuItem();
        miEditGenre = new javax.swing.JMenuItem();
        miEditMovie = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miLogout = new javax.swing.JMenuItem();
        miiExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Genre");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Name:");

        btnAddGenre.setText("Add");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnUpdateGenre.setText("Update");
        btnUpdateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setText("Delete");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        tbGenres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbGenresMouseClicked(evt);
            }
        });
        tbGenres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbGenresKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbGenres);

        lblErrorGenreName.setForeground(new java.awt.Color(255, 0, 0));

        jMenu1.setText("Edit");

        miEditPerson.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK));
        miEditPerson.setText("Edit Person");
        miEditPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditPersonActionPerformed(evt);
            }
        });
        jMenu1.add(miEditPerson);

        miEditGenre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK));
        miEditGenre.setText("Edit Genre");
        jMenu1.add(miEditGenre);

        miEditMovie.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK));
        miEditMovie.setText("Edit Movie");
        miEditMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditMovieActionPerformed(evt);
            }
        });
        jMenu1.add(miEditMovie);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Action");

        miLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK));
        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        jMenu2.add(miLogout);

        miiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
        miiExit.setText("Exit");
        miiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miiExitActionPerformed(evt);
            }
        });
        jMenu2.add(miiExit);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfGenreName)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblErrorGenreName, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfGenreName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrorGenreName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddGenre)
                    .addComponent(btnUpdateGenre)
                    .addComponent(btnDeleteGenre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miEditMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditMovieActionPerformed
        UserForm userForm = new UserForm();
        userForm.setVisible(true);
        close();
    }//GEN-LAST:event_miEditMovieActionPerformed

    private void miEditPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditPersonActionPerformed
        EditPersonForm editPersonForm = new EditPersonForm();
        editPersonForm.setVisible(true);
        close();
    }//GEN-LAST:event_miEditPersonActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        if (formValid()) {
            try {
                Genre genre = new Genre(tfGenreName.getText().trim());
                int genreCreate = repository.createGenre(genre);

                if (genreCreate == 0) {
                    MessageUtils.showErrorMessage("Error", "Genre already exists!");
                } else {
                    MessageUtils.showInformationMessage("Message", "Genre is successfully created!");
                    genreTableModel.setGenres(repository.selectGenres());
                    clearForm();
                }

            } catch (Exception ex) {
                Logger.getLogger(EditGenreForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create new genre!");
            }
        }
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnUpdateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGenreActionPerformed
        if (formValid()) {
            try {
                selectedGenre.setName(tfGenreName.getText().trim());
                int genreUpdate = repository.updateGenre(selectedGenre);

                if (genreUpdate == 0) {
                    MessageUtils.showInformationMessage("Message", "Genre is successfully updated!");
                    genreTableModel.setGenres(repository.selectGenres());
                    clearForm();
                }
            } catch (Exception ex) {
                Logger.getLogger(EditGenreForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update genre!");
            }
        }
    }//GEN-LAST:event_btnUpdateGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        if (MessageUtils.showConfirmDialog("Delete genre", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                int genreDelete = repository.deleteGenre(selectedGenre.getId());
                if (genreDelete == 0) {
                    MessageUtils.showInformationMessage("Message", "Genre is successfully deleted!");
                    genreTableModel.setGenres(repository.selectGenres());
                    clearForm();
                }
            } catch (Exception ex) {
                Logger.getLogger(EditGenreForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete new genre!");
            }
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        LoginForm loginForm = new LoginForm();
        loginForm.setVisible(true);
        close();
    }//GEN-LAST:event_miLogoutActionPerformed

    private void miiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miiExitActionPerformed
        close();
    }//GEN-LAST:event_miiExitActionPerformed

    private void tbGenresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbGenresKeyReleased
        showGenre();
    }//GEN-LAST:event_tbGenresKeyReleased

    private void tbGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbGenresMouseClicked
        showGenre();
    }//GEN-LAST:event_tbGenresMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditGenreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditGenreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditGenreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditGenreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditGenreForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnUpdateGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrorGenreName;
    private javax.swing.JMenuItem miEditGenre;
    private javax.swing.JMenuItem miEditMovie;
    private javax.swing.JMenuItem miEditPerson;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenuItem miiExit;
    private javax.swing.JTable tbGenres;
    private javax.swing.JTextField tfGenreName;
    // End of variables declaration//GEN-END:variables

    private void close() {
        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }

        return ok;
    }

    private void showGenre() {
        clearForm();
        int selectedRow = tbGenres.getSelectedRow();
        int selecetdGenreID = (int) genreTableModel.getValueAt(selectedRow, 0);

        try {
            Optional<Genre> optionalGenre = repository.selectGenre(selecetdGenreID);
            if (optionalGenre.isPresent()) {
                selectedGenre = optionalGenre.get();
                fillForm(selectedGenre);
            }

        } catch (Exception ex) {
            Logger.getLogger(EditGenreForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show genre!");

        }

    }

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditGenreForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfGenreName);
        errorLabels = Arrays.asList(lblErrorGenreName);
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbGenres.setAutoCreateRowSorter(true);
        tbGenres.setRowHeight(25);
        genreTableModel = new GenreTableModel(repository.selectGenres());
        tbGenres.setModel(genreTableModel);
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        selectedGenre = null;
    }

    private void fillForm(Genre selectedGenre) {
        tfGenreName.setText(selectedGenre.getName());
    }
}
